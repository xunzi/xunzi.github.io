<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Bloggggg - web</title><link href="https://xunzi.github.io/" rel="alternate"></link><link href="https://xunzi.github.io/feeds/atom/web.xml" rel="self"></link><id>https://xunzi.github.io/</id><updated>2016-02-08T20:29:00+01:00</updated><subtitle>We are fools whether we dance or not so we might as well dance</subtitle><entry><title>Umstellung auf https</title><link href="https://xunzi.github.io/umstellung-auf-https.html" rel="alternate"></link><published>2016-02-08T20:29:00+01:00</published><updated>2016-02-08T20:29:00+01:00</updated><author><name>Christian Drexler</name></author><id>tag:xunzi.github.io,2016-02-08:/umstellung-auf-https.html</id><summary type="html">&lt;p&gt;Da es dank &lt;a href="https://letsencrypt.org/"&gt;Let's Encrypt&lt;/a&gt; jetzt auch https-Zertifikate für lau gibt,
die in allen Browsern akzeptiert werden, habe ich dieses Blog dann
auch mal auf https umgestellt. Hierfür benötigt man nur den
Letsencrypt-Client, dann ist das Ganze in 2 Minuten umgesetzt. Ergänzt
um einen Redirect von http auf https ist …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Da es dank &lt;a href="https://letsencrypt.org/"&gt;Let's Encrypt&lt;/a&gt; jetzt auch https-Zertifikate für lau gibt,
die in allen Browsern akzeptiert werden, habe ich dieses Blog dann
auch mal auf https umgestellt. Hierfür benötigt man nur den
Letsencrypt-Client, dann ist das Ganze in 2 Minuten umgesetzt. Ergänzt
um einen Redirect von http auf https ist die Seite jetzt ganz  den
neuen Google-Siteranking-Kriterien entsprechend gesichert.&lt;/p&gt;
&lt;p&gt;Der &lt;a href="https://www.ssllabs.com/ssltest/analyze.html?d=drexler-online.net"&gt;SSL Server Test&lt;/a&gt; vergibt für die Konfig sogar ein A+.&lt;/p&gt;</content><category term="misc"></category><category term="web"></category></entry><entry><title>Bildergalerien mit Sigal</title><link href="https://xunzi.github.io/bildergalerien-mit-sigal.html" rel="alternate"></link><published>2014-07-19T12:00:00+02:00</published><updated>2014-07-19T12:00:00+02:00</updated><author><name>Christian Drexler</name></author><id>tag:xunzi.github.io,2014-07-19:/bildergalerien-mit-sigal.html</id><summary type="html">&lt;p&gt;Die gelegentlich anfallenden Fotos aus dem Freunds- und Familienkreis
habe ich bisher ärgerlicherweise bei Google hochgeladen udn mit einem
privaten Link verteilt, so dass sie zwar nicht einer Google-Suche zum
Opfer fallen können, aber dennoch bei Google bekannt sind. Viele Leute
sind nachvollziehbarerweise auch gar nicht glücklich darüber, wenn sie …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Die gelegentlich anfallenden Fotos aus dem Freunds- und Familienkreis
habe ich bisher ärgerlicherweise bei Google hochgeladen udn mit einem
privaten Link verteilt, so dass sie zwar nicht einer Google-Suche zum
Opfer fallen können, aber dennoch bei Google bekannt sind. Viele Leute
sind nachvollziehbarerweise auch gar nicht glücklich darüber, wenn sie
ihr Antlitz auf einer bei Google gehosteten Seite wiederfinden, so
dass hier eine neue Lösung hermusste. Da ich ja das Blog schon mit
&lt;a href="https://xunzi.github.io/streiche-mezzanine-setze-pelican.html"&gt;Pelican&lt;/a&gt; auf einen
Generator für statische Webseiten umgestellt habe, lag es natürlich
nahe, auch die Fotos mit einem solchen Generator in die Webseite
einzubinden. Die Wahl ist hier auf &lt;a href="http://sigal.saimon.org/en/latest/"&gt;Sigal&lt;/a&gt; gefallen, das im
wesentlichen auf den gleichen Technologien aufsetzt (Python,
Jinja-Templates, Blinker).&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Update&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Irgendwie war das Handling doch nicht benutzerfreundlich genug, Bilder
teile ich jetzt über owncloud. Der ganze Sigal-Kram ist wieder
rausgeflogen.&lt;/p&gt;</content><category term="misc"></category><category term="web"></category><category term="photos"></category></entry><entry><title>Streiche Mezzanine, setze Pelican</title><link href="https://xunzi.github.io/streiche-mezzanine-setze-pelican.html" rel="alternate"></link><published>2013-11-30T12:00:00+01:00</published><updated>2013-11-30T12:00:00+01:00</updated><author><name>Christian Drexler</name></author><id>tag:xunzi.github.io,2013-11-30:/streiche-mezzanine-setze-pelican.html</id><summary type="html">&lt;p&gt;Da &lt;a href="https://xunzi.github.io/blogtransfer-von-pebble-zu-mezzanine.html"&gt;Mezzanines&lt;/a&gt;
Funktionsumfang für meine bescheidenen Bedürfnisse doch zu groß war,
habe ich das Blog auf &lt;a href="http://getpelican.com/"&gt;Pelican&lt;/a&gt; umgestellt, einen Generator für
statische Webseiten. Denn Text kann man in &lt;a href="http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html"&gt;reStructuredText&lt;/a&gt; oder
&lt;a href="http://daringfireball.net/projects/markdown/"&gt;Markdown&lt;/a&gt; verfassen und es gibt eine große Auswahl an &lt;a href="https://github.com/getpelican/pelican-themes"&gt;Themes&lt;/a&gt; und
&lt;a href="https://github.com/getpelican/pelican-plugins"&gt;Plugins&lt;/a&gt;, so dass bei Bedarf das Aussehen des Blogs …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Da &lt;a href="https://xunzi.github.io/blogtransfer-von-pebble-zu-mezzanine.html"&gt;Mezzanines&lt;/a&gt;
Funktionsumfang für meine bescheidenen Bedürfnisse doch zu groß war,
habe ich das Blog auf &lt;a href="http://getpelican.com/"&gt;Pelican&lt;/a&gt; umgestellt, einen Generator für
statische Webseiten. Denn Text kann man in &lt;a href="http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html"&gt;reStructuredText&lt;/a&gt; oder
&lt;a href="http://daringfireball.net/projects/markdown/"&gt;Markdown&lt;/a&gt; verfassen und es gibt eine große Auswahl an &lt;a href="https://github.com/getpelican/pelican-themes"&gt;Themes&lt;/a&gt; und
&lt;a href="https://github.com/getpelican/pelican-plugins"&gt;Plugins&lt;/a&gt;, so dass bei Bedarf das Aussehen des Blogs schnell mal
umgestellt werden kann. Ein weiterer Vorteil ist, dass die Inhalte
dann einfach unter Versionskontrolle gestellt werden können, es sind
ja nur Textdateien.&lt;/p&gt;
&lt;p&gt;Praktischerweise kann Pelican auch von einem Rss-Feed &lt;a href="http://docs.getpelican.com/en/3.3.0/importer.html"&gt;importieren&lt;/a&gt;,
so dass der erneute Transfer des Inhalts schnell und schmerzfrei über
die Bühne ging.&lt;/p&gt;</content><category term="misc"></category><category term="web"></category><category term="rootserver"></category><category term="mezzanine"></category><category term="pelican"></category></entry><entry><title>Blogtransfer von Pebble zu Mezzanine</title><link href="https://xunzi.github.io/blogtransfer-von-pebble-zu-mezzanine.html" rel="alternate"></link><published>2013-05-13T18:36:00+02:00</published><updated>2013-05-13T18:36:00+02:00</updated><author><name>Christian Drexler</name></author><id>tag:xunzi.github.io,2013-05-13:/blogtransfer-von-pebble-zu-mezzanine.html</id><summary type="html">&lt;p&gt;Die Umsetzung der alten Blogposts aus Pebble erfolgte mit Hilfe eines
Skripts, das die xml-Dateien parst und entsprechende
Mezzanine/Django-Objeckte anlegt inkl. Tags und Kategorien.&lt;/p&gt;
&lt;p&gt;Das Skript gibt es als &lt;a href="https://gist.github.com/xunzi/5603984"&gt;Gist&lt;/a&gt; bei Github.&lt;/p&gt;
&lt;p&gt;Um wenigstens die Syndication-Clients nicht zu verschrecken, schubsen
die folgenden Rewrite-Regeln in der Nginx-Konfig die Requests zu …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Die Umsetzung der alten Blogposts aus Pebble erfolgte mit Hilfe eines
Skripts, das die xml-Dateien parst und entsprechende
Mezzanine/Django-Objeckte anlegt inkl. Tags und Kategorien.&lt;/p&gt;
&lt;p&gt;Das Skript gibt es als &lt;a href="https://gist.github.com/xunzi/5603984"&gt;Gist&lt;/a&gt; bei Github.&lt;/p&gt;
&lt;p&gt;Um wenigstens die Syndication-Clients nicht zu verschrecken, schubsen
die folgenden Rewrite-Regeln in der Nginx-Konfig die Requests zu den
alten Rss- und Atom-Feeds auf die neuen Resourcen weiter:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;rewrite ^/pebble/atom.xml$ /blog/feeds/atom/ break;rewrite ^/pebble/tags/(.+)/(.+).xml$ /blog/tag/$1/feeds/$2/ break;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Alle anderen Requests zu den alten Pebble-Urls werden einfach auf die
Blogübersicht weitergeleitet:  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;rewrite ^/pebble/.*     /blog/ permanent;&lt;/code&gt;&lt;/p&gt;</content><category term="misc"></category><category term="mezzanine"></category><category term="web"></category><category term="pebble"></category></entry><entry><title>Einbruch!</title><link href="https://xunzi.github.io/einbruch.html" rel="alternate"></link><published>2010-09-19T19:28:00+02:00</published><updated>2010-09-19T19:28:00+02:00</updated><author><name>Christian Drexler</name></author><id>tag:xunzi.github.io,2010-09-19:/einbruch.html</id><summary type="html">&lt;p&gt;Einbruch in unseren schönen Server! Spam- und Virusmails ham se
verschickt, die Schmutzbuckel.&lt;/p&gt;
&lt;p&gt;Aufgefallen ist das Ganze dadurch, daß Postfix immer versucht hat, Mails
an den Webserver-User zuzustellen. Ich habe mir die Mails dann mal
weiterleiten lassen und hatte in ein paar Sekunden weit über 500 neue
Emails, alles Bounces …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Einbruch in unseren schönen Server! Spam- und Virusmails ham se
verschickt, die Schmutzbuckel.&lt;/p&gt;
&lt;p&gt;Aufgefallen ist das Ganze dadurch, daß Postfix immer versucht hat, Mails
an den Webserver-User zuzustellen. Ich habe mir die Mails dann mal
weiterleiten lassen und hatte in ein paar Sekunden weit über 500 neue
Emails, alles Bounces von Aol und Yahoo, die mich darüber informieren
wollten, daß meine Mails nicht zugestellt werden konnten. In der
Mailqueue waren auch noch ein paar Dutzend Mails, denen die Mxe von
Yahoo die Annahme verweigerten. Sehr verdächtig! Die gebouncten Mails
machten Werbung für potenzsteigernde Mittel und enthielten wohl auch
Viren.&lt;/p&gt;
&lt;p&gt;Der Einbruch erfolgte über eine nicht gepatchte Webapplikation, hier
fanden sich dann in einem Cache-Verzeichnis ein paar Php-Dateien, namens
admin.php, cache.php (die sind nach dem Dateidatum zusammen dort
gelandet), cached.php (zwei Tage später hochgeladen) und sendme.php
(hierüber sind die Spammails hochgeladen worden). Admin.php ist ein
&lt;a href="/static/w4ck1ng.png"&gt;Webinterface&lt;/a&gt;, mit dem man verschiedene interessante Sachen machen
kann. Cache.php und cached.php ermöglichen es, einen Irc-Server
aufzumachen.&lt;/p&gt;
&lt;p&gt;Die Zahl der Müllmails liegt bei etwa 20000, das hat schon gereicht, um
auf die Blackliste von Barracuda zu kommen (die haben den Eintrag aber
auf Nachfrage sehr schnell wieder gelöscht).&lt;/p&gt;
&lt;p&gt;Insgesamt eine sehr ärgerliche Geschichte, die wohl auch noch
unangenehmer hätte ausgehen können.&lt;/p&gt;
&lt;p&gt;Die Datei admin.php hat die Checksumme 20ed027c0d6d6798b3ec03fb8ef42756,
falls mal einer vergleichen will.&lt;/p&gt;
&lt;p&gt;Als Gegenmaßnahme habe ich dem Webserver-User die Shell gegen /bin/false
ausgetauscht (das hätte ich schon längst machen sollen) und einen Bcc
für alle Mails eingerichtet, die der Webserver-User schickt. Das geht
mit folgendem Eintrag in /etc/postfix/main.cf:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sender\_bcc\_maps = hash:/etc/postfix/sender\_bcc&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;In dieser Datei stehen Absenderadressen und die dazugehörigen
bcc-Adressen. Das Ganze muß noch per postmap /etc/postfix/sender_bcc in
eine Hashmap umgewandelt werden, dann wird für jede Mail, die
www-data@minden144.server4you.de eine Blindkopie an eine andere Andresse
geschickt.&lt;/p&gt;</content><category term="misc"></category><category term="web"></category><category term="rootserver"></category><category term="security"></category></entry><entry><title>Django-Toolbar</title><link href="https://xunzi.github.io/django-toolbar.html" rel="alternate"></link><published>2010-06-24T18:24:00+02:00</published><updated>2010-06-24T18:24:00+02:00</updated><author><name>Christian Drexler</name></author><id>tag:xunzi.github.io,2010-06-24:/django-toolbar.html</id><summary type="html">&lt;p&gt;Bei meinen Experimenten mit &lt;a href="http://www.djangoproject.com/"&gt;Django&lt;/a&gt; ist mir letztlich die
&lt;a href="http://rob.cogit8.org/blog/2008/Sep/19/introducing-django-debug-toolbar/"&gt;Django-Toolbar&lt;/a&gt; unter die Finger gekommen. Hierbei handelt es sich um
eine Django-Middleware, die zusätzlich zu der normalen Ausgabe ein
Overlay erzeugt, dem man so interessante Details wie die Http-Header des
aktuellen Requests oder die SQL-Queries, die für den aktuellen Request
ausgeführt …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Bei meinen Experimenten mit &lt;a href="http://www.djangoproject.com/"&gt;Django&lt;/a&gt; ist mir letztlich die
&lt;a href="http://rob.cogit8.org/blog/2008/Sep/19/introducing-django-debug-toolbar/"&gt;Django-Toolbar&lt;/a&gt; unter die Finger gekommen. Hierbei handelt es sich um
eine Django-Middleware, die zusätzlich zu der normalen Ausgabe ein
Overlay erzeugt, dem man so interessante Details wie die Http-Header des
aktuellen Requests oder die SQL-Queries, die für den aktuellen Request
ausgeführt wurden. Das ist schon cool, fast noch cooler ist, daß
Django mittlerweile sehr gut und vollständig in &lt;a href="http://packages.ubuntu.com/lucid/python-django"&gt;Ubuntu&lt;/a&gt; verfügbar
ist (und auch die Toolbar ein aptitude install
python-django-debug-toolbar entfernt ist). &lt;a href="/static/screenshot-django-toolbar.png"&gt;So&lt;/a&gt; sieht das Ganze in
Aktion aus.&lt;/p&gt;</content><category term="misc"></category><category term="django"></category><category term="helferlein"></category><category term="web"></category></entry></feed>